Date : 5th February 2022
Mentor: DEVANG SHARMA
Batch: Tutort Academy
Agenda : INSTAGRAM - High Level Design

-> Scope and Definition- DONE
-> Consumers of System- 
-> Requirement clarification - 
 	- Functional
 	- Non Functional
 	- Out of Scope

-> Relationship between Users as Graph Vertices - Important (Directions and Weight)

-> Capacity Analysis 
-> High Level Design  
-> DB Schema
-> Detailed Component Design
-> Ranking and News Feed Generation - Infinite Feed - Most Important
-> API design  
-> Business Flow
-> CDN, Cache, Sharding, Load balancing, Indexing
-> Bottlenecks and tradeoffs

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".
"We Will Start immediately After Every one has joined the session"






Social Media
- facebook
- instagram- MOST
- twitter
- tiktok


Instagram:
- Reels: MOST
- Stories (Public, Private)
- IGTV (Live)
- Memes
- Others (In Comments)



Creators/Influencers- Valuable Content




(1) Scope and Definition 

Photo Sharing and Video Sharing Platform
Upload, Share - Photos, Videos

Two Options:
(1) Public- Anybody Can see
(2) Private- Only Followers can see


"News Feed"/Timeline in Insta

- Content from The Accounts (Pages/Community/People) you follow




(2) Consumers of System- 

- Clients (Devices- Laptop, Mac, PC, Mobile- Android/iOS, Tab etc)
- User (Read Based)
- User who have access to upload photo/video on platform (Write Operation)


(3) Read and Write Operations

Read Heavy vs Write Heavy?



Read: GET
- View


Write: POST (New) / PUT (Edit)
- Post

Instagram is R-Heavy or W-Heavy ?


1 User: 1000 Followers

Upload a Pic -> 1000 Followers

1 POST - 1000 Views (Private)

Account Public:
Tags -> hashtags, checkin, collabroation

1 Post - 10k Views

#travel #trending



R/W Ratio: 10k:1 or 1000:1


Ans: Read Heavy



(4) Requirements:

(A) Functional

- Upload Photos
- View Photos
- Follow Others(Page, Community, Person, hashtags)
- Generate and Display News Feed (Timeline- Top Posts from Acoounts you follow)

(B) Non Functional

- Highly Reliable- Any Uploaded Content (IGTV/Reels/Post), should not be deleted
- Low Latency (Timeline- 150 ms)
- Availability > Consistency, Eventually Consistent


(C) Extra:
- Stories : 
   Public: Everyone
   Private: Followers (Red), Closed Friends (Green)

- Suggestions:
	Ronaldo: Follow
	Suggest: Messi, Nemar and etc

- Tags:
	Search by #travel, #dubai







CAP Theorem:

- Consistency
- Availability
- Partition Tolerance : Distributed Systems- DONE


Only 2/3 CAP Properties can exist in a System

Two Types of Systems:

CP

Consitency > Availability

All Nodesare consistent with the updated changes


Master - Slave Model:

Node 1: Master --------> Node 2, Node 3, Node 4.....Slave Nodes


Strong Consistency

- The Moment I update Master, All Slave Nodes will be updates at same time.
- No Stale Data


Eventual Consistency

Moment I update Master, Slave Nodes will NOT BE updated at same time.
Eventually, they will be updated.

- Stale/Old/Non-Updated Data


---- Example of Strong Consistency:

Bank Account/Paytm/Gpay/Phonepe:

User: Account- 1,00,000

ATM A: Withdraw: 10,000: MASTER

Balance: 1L-10k = 90K

ATM A: 90k


ATM B, ATM C, ATM D: 1L/90k: SLAVES







AP

Availability > Consistency


Available: 

(1) I open instagram -> I see nothing-> Not Available

(2) I open instagram -> I see New Posts a bit later: Available but Eventually Consistent





---- Example of Eventual Consistency:

- Any Social Media
- Any Content Platform


Instagram:

Ronaldo: 300 Mn Followers - Everywhere in Globe

1 Post-> 300 Mn Followers

Will Everyone see at same time?

- NO


Eventually, Everyone will see.











(5) Ability to Support ALL Devices (Imp - Discussion Later)
- Mac,PC, Phone (Windows, iOS, Android), Tabs



Devices:      Formats:(I)      Dimensions:(J)        Bandwidth:(K)  (GLOBAL)

Mac        		MKV	          4K                High
Phone           MP4           1080p				Moderate
1               1              1                 1
2  				2  			   2 				 2
3               3  			   3  				 3 
4  				4   		   4    			 4


Bandwidth:

- Strong Bandwidth
- Moderate Bandwidth
- Very Low Bandwidth



Support All Bandwidths


Video- FPS (Frames per seconds), Bitrate of Audio

I can adjust FPS, Bitrate --> To Set Quality of a Video (Size of Video)

Compression/Video Encoding:

High Quality (High Size)  ---> Low Quality (Low Size)




Total:

I*J*K Number of Users -> Very Large Number





(6) Adaptive Bitrate Streaming (ABS) for Clients


Clients (Devices- Laptop, Mac, Mobile, PC, Smart Screen, Smart Watch, Tab)



Laptop _ _ _ _  Server 1 (Netflix)

Mobile _ _ _ _  Server 2 (Youtube)

_: Chunk of Video



"Plays a Chunk of Video and simultaneouly, request for Next Chunk of Video"



Playing Chunk 21: Until Now - 1080p

Making Request for Chunk 22 -> Bandwidth Low

Make Request for Lower Quality of Chunk 22 -> 480p

Chunk 22: 480P

Request for Chunk 23 -> Bnadwidth High

Chunk 23: 1080p


(7) High Level Design- DONE



Two Senarios:

(1) Upload Content
(2) View/Search Content

Contnet- Photos, Reels, IGTV etc



Store Content -> Database

2 databases:

(1) Storing Content (Photo/Video/IGTV)
(2) Storing Content Metadata (Location, Tag, #, Creation Id, User ID)


Example:

Went to London, Clicked with Ed Sheeran, Put #music in Post


Content: Photo (png/jpg)
Metadata: London, #music, tagged: ed sheeran, date, time





(8) DB Schema


Content (Reels/Photos/IGTV)
- ContentID (PK)
- Path (S3)
- Latitude
- Longitude
- creationdate
- UserID
- metadata



User
- UserID (PK)
- Email
- Number
- DOB
- LastLogin
- Creation_Date



Userfollow
- UserID1 (PK)
- UserID2 (PK)

(Composite Key)



Users as Graph Vertices:


(1) Instagram:

Users A and B


A follows B

B follows A -> Mandatory ?

A --> B: YES

B <---A : Not Mandatory


Unidirection Graph

Weight: (EDGE)
Close Friend 
Watch Post/Stories or Not


(2) Facebook:

A and B are friends

A ---> B: YES
A <--- A: Yes

Bi-Directional Graph

Weight: (EDGE)
Close Friend 
Watch Post/Stories or Not




(9) Database

SQL vs NoSQL


SQL: Common Structured, ACID Compliant
- Indexing, Sharding

Eg: MySQL, Postgres

NoSQL: No Common Structure

Eg: Cassandra, MongoDB







Content (Reels/Photos/IGTV)
- ContentID (PK)
- Path (S3)
- Latitude
- Longitude
- creationdate
- UserID
- metadata



User - SQL DB
- UserID (PK)
- Email
- Number
- DOB
- LastLogin
- Creation_Date



Userfollow - SQL DB
- UserID1 (PK)
- UserID2 (PK)

(Composite Key)



Content (Reels/Photos/IGTV)
- ContentID (PK)
- Path (S3)
- Latitude
- Longitude
- creationdate
- UserID
- metadata



IGTV/Reels: Videos: More Size
Photos: Less Size -> BigQuery DB


Low Latency:

Quickly Fetch IGTV/Reels/Photos



IGTV/Reels -> Can't Store in SQL DB

Must be Stored in "Distributed DB"
(Chunk of Data -> Not Complete File)

1 min video: 10 sec x 6 Chunks

Stored in HDFS: Hadoop or Amazon S3 Bucket (Insta)





Store Relationships:

Users -> Content
Content -> Followers


We Use, Wide-Column DB- Cassandra

Cassandra:

- Key - Value Pair
- Always Maintain Replicated Server
- Extremely Fast Fetch


SQL Joins:
Cartesian Joins

M Columns, N Columns:

Join: M*N Results




(10) Ranking and News Feed Generation - Infinite Feed - Most Important


Most Relevant and Latest content from people/account I follow.


Top 100 Photos of My Feed:

- Search Users I follow
- get a list of all content they have posted
- Ranking Method (Likes, Views, Shares)
- Shown to My Timeline

Complex:
Query Multiple Tables, 
Perform Sorting/Ranking
Shown to Latency


-- VERY HIGH LATENCY

News Feed is PRE-COMPUTED: Dedicated Servers to Work on News feed


Correct Approach?


(1) Pull

Client(Devices) pull the news feed from your server on regular basis or manulayy

10 sec -> Pull 

Most Responses will be Empty


(2) Push

Server can push new data to the user who follows

Problem for Influencers/Celebrity:

Mn+ Followers:

1 Post -> Pushed to Mn+ Followers
Long Polling -> Increases the Time Complexity/ Latency


(3) Hybrid : ANS


Pull + Push Model


For Celebrity: Pull Model
Client(Devices) pull the news feed from your server on regular basis or manulayy



For Normal Users: Push Model

Server can push new data to the user who follows


Notification: See New Posts (Dropdown) - PUSH

Refresh (Scroll Up)- PULL -> 
(1) New Posts are available -> SHOW
(2) New Posts Not Available -> Caught Up	



(11) CDN
CDN: Content Delivery Network : Fetch the Images via Load balancers to Multiple Geo Locations

- Distributed Server across globe 
(Geography, Bandwidth)

- CDN Uses Replicated Serveer -> reduce the latency

Eg: 
London -> UK Server


Mumbai -> Mumbai Server


(12) Cache


fetching frequently searched items


Quick Posts/Timlines/Searches


Intelligent Cache:

80-20 Rule:

80% of Traffic because of 20% Contnet

Put 20% Contnet in cache -> Very Quick Reults




Less Latency -> More Engagement -> More Revenue





Ending:

- Learn Anything New: Post on Linkedin, Tag Tutort Academy and Me
- Course for System Design- Tutort Academy
- Next Masterclass - Which Topic?










